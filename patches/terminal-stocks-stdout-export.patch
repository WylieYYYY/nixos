diff --git a/app/services/jsonService.js b/app/services/jsonService.js
index df4254c..dc83142 100644
--- a/app/services/jsonService.js
+++ b/app/services/jsonService.js
@@ -5,5 +5,5 @@ module.exports = {
 };
 
 function jsonExport(data) {
-    fs.writeFileSync('terminal-stocks_' + Date.now() + '_.json', JSON.stringify(data));
-}
\ No newline at end of file
+    console.log(JSON.stringify(data));
+}
diff --git a/app/services/yahooService.js b/app/services/yahooService.js
index e18dee7..0df0b47 100644
--- a/app/services/yahooService.js
+++ b/app/services/yahooService.js
@@ -52,11 +52,12 @@ function getCurrentPrice(tickers) {
     return new Promise(async function (resolve, reject) {
       try {
         var entity = await yahooFinance.quote(ticker)
-        var price = getPrice(entity);
-        var change = getChange(entity);
-        var changePercent = getChangePercent(entity);
-        var atDate = getAtDate(entity);
-        var atTime = getAtTime(entity);
+        var marketStatus = getMarketStatus(entity);
+        var price = getPrice(entity, marketStatus);
+        var change = getChange(entity, marketStatus);
+        var changePercent = getChangePercent(entity, marketStatus);
+        var atDate = getAtDate(entity, marketStatus);
+        var atTime = getAtTime(entity, marketStatus);
         var longName = (getLongName(entity)) ? getLongName(entity) : getShortName(entity);
         var dayRange = getDayRange(entity);
         var fiftyTwoWeekRange = getFiftyTwoWeekRange(entity);
@@ -91,12 +92,13 @@ function getMarketSummary() {
       var entities = await yahooFinance.quote(tickers)
       var data = [];
       for (let entity of entities) {
+        var marketStatus = getMarketStatus(entity);
         var shortName = (getShortName(entity)) ? getShortName(entity) : getLongName(entity);
         shortName = (shortName) ? shortName : entity.symbol;
-        var price = getPrice(entity);
-        var change = getChange(entity);
-        var changePercent = getChangePercent(entity);
-        var atDate = getAtDate(entity);
+        var price = getPrice(entity, marketStatus);
+        var change = getChange(entity, marketStatus);
+        var changePercent = getChangePercent(entity, marketStatus);
+        var atDate = getAtDate(entity, marketStatus);
         data.push({ ticker: entity.symbol, shortName, price, change, changePercent, atDate });
       }
       resolve(data);
@@ -127,24 +129,35 @@ function getHistoricalPrices(ticker, options) {
   });
 }
 
-function getPrice(entity) {
-  return formatter.format(entity.regularMarketPrice);
+function getMarketStatus(entity) {
+  if (entity.hasPrePostMarketData) {
+    let state = entity.marketState.toLowerCase();
+    if (state.includes('PRE')) return 'pre';
+    if (state.includes('POST')) return 'post';
+    return 'regular';
+  } else {
+    return 'regular';
+  }
+}
+
+function getPrice(entity, marketStatus) {
+  return formatter.format(entity[marketStatus + 'MarketPrice']);
 }
 
-function getChange(entity) {
-  return parseFloat(entity.regularMarketChange).toFixed(2);
+function getChange(entity, marketStatus) {
+  return parseFloat(entity[marketStatus + 'MarketChange']).toFixed(2);
 }
 
-function getChangePercent(entity) {
-  return parseFloat(entity.regularMarketChangePercent).toFixed(2);
+function getChangePercent(entity, marketStatus) {
+  return parseFloat(entity[marketStatus + 'MarketChangePercent']).toFixed(2);
 }
 
-function getAtDate(entity) {
-return new Date(entity.regularMarketTime).toLocaleDateString('en-US', dateFormattingOptions)
+function getAtDate(entity, marketStatus) {
+return new Date(entity[marketStatus + 'MarketTime']).toLocaleDateString('en-US', dateFormattingOptions)
 }
 
-function getAtTime(entity) {
-  return entity.regularMarketTime;
+function getAtTime(entity, marketStatus) {
+  return entity[marketStatus + 'MarketTime'];
 }
 
 function getLongName(entity) {
@@ -168,7 +181,9 @@ function getFiftyTwoWeekRange(entity) {
 }
 
 function getMarketState(entity) {
-  if( entity.marketState) {
-    return (entity.marketState === "REGULAR") ? "open" : "closed" 
+  if (entity.hasPrePostMarketData) {
+    return entity.marketState;
+  } else {
+    return entity.marketState === 'REGULAR' ? 'REGULAR' : 'CLOSED';
   }
-}
\ No newline at end of file
+}
diff --git a/bin/index.js b/bin/index.js
index 4daa158..438e8e7 100755
--- a/bin/index.js
+++ b/bin/index.js
@@ -1,7 +1,17 @@
 #!/usr/bin/env node
 
+const yahooFinance = require('yahoo-finance2').default;
 const stocksCli = require('../cli/stocksCli')
 
+yahooFinance.setGlobalConfig({
+    logger: {
+        info: () => {},
+        warn: () => {},
+        debug: () => {},
+        error: () => {}
+    }
+});
+
 var argv = require('yargs/yargs')(process.argv.slice(2))
     .usage('Usage: $0 -ticker [string] --historical [boolean] --ms [boolean]')
     .example('$0 -ticker <ticker> --historical', 'returns the price information of a given ticker')
@@ -51,4 +61,4 @@ if (argv.market) {
     } else {
         stocksCli.fetchCurrentPrice([ticker], options);
     }
-}
\ No newline at end of file
+}
diff --git a/cli/stocksCli.js b/cli/stocksCli.js
index d869c93..154ef4c 100644
--- a/cli/stocksCli.js
+++ b/cli/stocksCli.js
@@ -15,7 +15,7 @@ function fetchCurrentPrice(tickers, options = {}) {
         .then((data) => {
             if (options.export === 'json') {
                 jsonService.jsonExport(data);
-                console.log(responseTransformer.transformExportJsonSuccess())
+                console.error(responseTransformer.transformExportJsonSuccess())
             } else if (options.export === 'csv') {
                 csvService.csvExport(data);
                 console.log(responseTransformer.transformExportCsvSuccess())
@@ -23,7 +23,7 @@ function fetchCurrentPrice(tickers, options = {}) {
                 console.log(responseTransformer.transformCurrentPrice(data, options));
             }
         }).catch((error) => {
-            console.log(responseTransformer.transformError(error));
+            console.error(responseTransformer.transformError(error));
         });
 }
 
@@ -68,4 +68,4 @@ function fetchChart(ticker) {
         }).catch((error) => {
             console.log(responseTransformer.transformError(error));
         });
-}
\ No newline at end of file
+}
